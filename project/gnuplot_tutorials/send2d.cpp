

#define USE_CXX (__cplusplus >= 201103)

#include <vector>
#include <complex>
#include <cmath>

#include <boost/tuple/tuple.hpp>
#include <boost/array.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/irange.hpp>
#include <boost/bind.hpp>
#include <boost/math/constants/constants.hpp>

#include <gnuplot-iostrem/gnuplot-iostream.h>

#ifndef M_PI
#	define M_PI 3.14159265358979323846
#endif

#define PI boost::math::constants::pi<long double>()


void send3d() {
    Gnuplot gp(stdout);

    gp << "set xrange [0:10]\nset yrange [0:10]\nset zrange [0:10]\n";
    //gp << "set hidden3d nooffset\n";

    std::vector<boost::tuple<std::vector<double>,std::vector<double>,std::vector<double> > > pts;
    std::vector<double> x_pts(200);
    std::vector<double> y_pts(200);
    std::vector<double> z_pts(200);

    srand(time(NULL));
    for(int v=0; v<200; v++) {
        x_pts[v] = rand()%10;
        y_pts[v] = rand()%10;
        z_pts[v] = rand()%10;
    }
    pts.push_back(boost::make_tuple(x_pts, y_pts, z_pts));
    gp << "splot '-' with points title 'vec of boost::tuple of vec'\n";
    gp.send2d(pts);
    gp << std::endl;

}

void send3d_record() {

        Gnuplot gp;

        gp << "set xrange [0:10]\nset yrange [0:10]\nset zrange [0:10]\n";
        //gp << "set hidden3d nooffset\n";

        std::vector<boost::tuple<std::vector<double>,std::vector<double>,std::vector<double> > > pts;
        std::vector<double> x_pts(200);
        std::vector<double> y_pts(200);
        std::vector<double> z_pts(200);
        srand(time(NULL));
        for(int v=0; v<200; v++) {
            x_pts[v] = rand()%10;
            y_pts[v] = rand()%10;
            z_pts[v] = rand()%10;
        }
        pts.push_back(boost::make_tuple(x_pts, y_pts, z_pts));
        gp << "splot" << gp.binFile2d(pts, "record") << " with lines title 'vec of boost::tuple of vec'\n";
        gp << std::endl;

};

void send2d_colmajor() {
    //Gnuplot gp;
    // for debugging, prints to console
    Gnuplot gp;

    gp << "set zrange [0:1]\n";
    gp << "set hidden3d nooffset\n";

    // I use temporary files rather than stdin because the syntax ends up being easier when
    // plotting several datasets.  With the stdin method you have to give the full plot
    // command, then all the data.  But I would rather give the portion of the plot command for
    // the first dataset, then give the data, then the command for the second dataset, then the
    // data, etc.

    gp << "splot ";

    std::vector<std::tuple<std::vector<double>, std::vector<double>, std::vector<double> > >  pts;
    //std::vector<std::vector<std::vector<double> > > pts(3);

    std::vector<double> x_pts, y_pts, z_pts;


    for (int v = 0; v < 25; v++) {
        double z = 0;
        double x = std::cos(2.0 * M_PI * v / (24));
        double y = std::sin(2.0 * M_PI * v / (24));

        x_pts.push_back(x);
        y_pts.push_back(y);
        z_pts.push_back(z);
    }

    pts.push_back(std::make_tuple(x_pts, y_pts, z_pts));
    gp << gp.binFile2d(pts, "record") << "with lines title 'object1'";
    gp << std::endl;

}

void send_lemniscate(int index) {

    Gnuplot gp;

    gp << "set zrange [0:1]\n";
    gp << "set hidden3d nooffset\n";

    // I use temporary files rather than stdin because the syntax ends up being easier when
    // plotting several datasets.  With the stdin method you have to give the full plot
    // command, then all the data.  But I would rather give the portion of the plot command for
    // the first dataset, then give the data, then the command for the second dataset, then the
    // data, etc.



    std::vector<std::tuple<std::vector<double>, std::vector<double>, std::vector<double> > >  pts;

    std::vector<signed> theta;
    std::vector<double> x_pts, y_pts, z_pts, b_pts;

    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0, 360);
    for (int n = 0; n < 100; ++n) {
        //Use dis to transform the random unsigned int generated by gen into a double in [1, 2)
        theta.push_back(dis(gen));
        std::cout << theta[n] << ' '; //Each call to dis(gen) generates a new random double
    }

    std::cout << '\n';

    std::string cx, cy, cz;
    // Lemniscate Noise Model
    for ( int i = 0; i< 100; i++) {
        // Noise
        double x,y,z;
        x = 1*cos(theta[i]*PI/180.0)/(1.0+std::pow(sin(theta[i]*PI/180.0), 2));
        y = 1*(cos(theta[i]*PI/180.0)*sin(theta[i]*PI/180.0))/(0.2+std::pow(sin(theta[i]*PI/180.0), 2));
        x_pts.push_back(x) ;
        y_pts.push_back(y);
        z_pts.push_back(0.0);

        if(i == index){
            cx = std::to_string(x);
            cy = std::to_string(y);
            cz = std::to_string(z);
        }

        // Real
    }
    std::string cmd = "splot";
    if(index > 0){
        cmd = "splot";
    }

    gp << "set label \"PT\" at " + cx + "," + cy + "," + cz + "; " + cmd  + " ";
    pts.push_back(std::make_tuple(x_pts, y_pts, z_pts));
    gp << gp.binFile2d(pts, "record") << "with points title 'object1'";
    gp << std::endl;

}

int main() {

    //send3d();
    //send3d_record();
    //send2d_colmajor();
    for ( int i = 0; i< 10; i++) {
        send_lemniscate(i);
        usleep(1000);
    }

    return 0;
}


